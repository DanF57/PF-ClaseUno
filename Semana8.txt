No va en el examen BIM1

#Efectos Colaterales
Ejemplo de efectos colaterales
int cont = 0;
void addOne() {
	cont = cont + 1;
}
newState = print("hola") + oldState

Una funcion tiene efectos colaterales si 
 - Modifica el valor de una variable o de una estructura de datos mutable.
 - Utiliza mecanismos de IO
 - Lanza una excepcion 
 - Se detiene por un error

#Efectos Colaterales - solucion - Ejemplo
def division(n1: Double, n2: Double) = {
  if(n2 == 0) throw new RuntimeException("division por 0")
  else n1/n2
}

import scala.util.Try
def pureDivision(n1: Double, n2: Double): Try[Double] =
  Try{division(n1, n2)}

pureDivision(7, 0)

division(5, 2)
division(7, 0)

val result = pureDivision(1, 3)

import scala.util.{Success, Failure}

result match {
  case Success(v) => println(v)
  case Failure(e) => println(e.getMessage)
}

#Option - Some / None

def toInt(s: String) : Option[Int] = {
  try{
    Some(Integer.parseInt(s))
  } catch {
    case e: Exception => None
  }
}

toInt("1")
toInt("Uno")
val txtNumbers = List("1", "foo", "3", "bar")
txtNumbers.map(toInt)
txtNumbers.map(toInt).flatten

val x = toInt("1").getOrElse(0)
toInt("1").foreach( i => printf("Obtener un Int: %d", i))}
  toInt("1") match {
    case Some(i) => println(i)
    case None => println("That didnt work")
  }
}

#Either/ Left/ Right

def divideXByY( x: Int, y: Int ): Either[String, Int] =
  if(y = 0) Left("No se puede dividir por 0")
  else Right(x/y)

Recomendacion usar Try/Succes/Failure